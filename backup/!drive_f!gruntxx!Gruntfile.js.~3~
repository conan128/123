module.exports = function(grunt){

 // LiveReload的默认端口号，你也可以改成你想要的端口号
var lrPort = 35729;
var serveStatic = require('serve-static');
var serveIndex = require('serve-index')
 // 使用connect-livereload模块，生成一个与LiveReload脚本
 // <script src="http://127.0.0.1:35729/livereload.js?snipver=1" type="text/javascript"></script>
 var lrSnippet = require('connect-livereload')({ port: lrPort });
 // 使用 middleware(中间件)，就必须关闭 LiveReload 的浏览器插件
var lrMiddleware = function(connect, options, middlwares) {
  return [
    lrSnippet,
    // 静态文件服务器的路径 原先写法：connect.static(options.base[0])
    serveStatic(options.base[0]),
    // 启用目录浏览(相当于IIS中的目录浏览) 原先写法：connect.directory(options.base[0])
    serveIndex(options.base[0])
  ];
};

		grunt.initConfig({
			pkg: grunt.file.readJSON('package.json'),
			//uglify的配置（js压缩）
			uglify: {
	            options: {
	                // 此处定义的banner注释将插入到输出文件的顶部
                    mangle: false, //不混淆变量名
                    preserveComments: 'some', //不删除注释，还可以为 false（删除全部注释），some（保留@preserve @license @cc_on等注释
					banner: '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
	            },
	            dist: {
                    options: {
                        report: "min",//输出压缩率，可选的值有 false(不输出信息)，gzip
					},
	                files: {
	                    //uglify会自动压缩concat任务中生成的文件
	                    'dist/js/app.min.js': ['dist/js/app.js']
	                }
	            }
	        },
	        //jshint的配置（代码校验）
	        jshint:{
	        	build:['src/js/test.js'],
	        	options:{
	        		//这里是覆盖JSHint默认配置的选项
                	globals: {
                    jQuery: true,
                    console: true,
                    module: true,
                    document: true
                	}
	        	}
	        },
	        //watch的配置(监听器)
	        watch:{
	        	build:{
	        		files:['src/*.js'],
	        		tasks:['jshint','uglify'],
	        		options:{spawn:false}
	        	},
	        	start:{
	        		files: ['*.html', 'css/*', 'js/*', 'images/**/*','dist/*','src/*','src/js/*'],
				    options: {
				    	livereload: lrPort
				    }
	        	}
	        },
	        //wiredep的配置（自动将bower下载的包导入html中）
	        wiredep: {
				target: {
					src: ['src/*.html'],
					directory:"js/libs"
				}
			},
			//connect配置，自动加载web server服务器
			connect: {
	                options: {
	                    protocol: 'http',
	                    port: 8081,
	                    hostname: '*',
	                    open:true,
						/*keepalive: true,*/
	                    base: ['./']
	                },
	                livereload: {
					options: {
					// 通过LiveReload脚本，让页面重新加载。
					middleware: lrMiddleware
					}
				}
        	},


        	useminPrepare: {
				html: 'src/*.html',
					options: {
					dest: 'dist'
				}
		    },
		    usemin: {
		        html: ['dist/*.html']
		    },
		    //copy任务，将src下的copy到dist
		    copy:{
		    	js:{
		    		expand:true,
                    cwd:'src/',
                    src:['*.html'],
		    		dest:'dist/',
		    	},
		    },
		    //合并
		    concat:{
		    	options: {
			      separator: ';',
			      stripBanners: true,
			      banner: '/*! <%= pkg.name %> <%= grunt.template.today("dd-mm-yyyy") %> */\n'
			    },
			    dist: {
			      src: ['src/js/*.js'],
			      dest: 'dist/js/app.js',
			    }
		    },
		});




		grunt.loadNpmTasks('grunt-contrib-uglify');
		grunt.loadNpmTasks('grunt-contrib-jshint');
		grunt.loadNpmTasks('grunt-contrib-watch');
		grunt.loadNpmTasks('grunt-wiredep');
		grunt.loadNpmTasks('grunt-contrib-connect');
		grunt.loadNpmTasks('grunt-usemin');
		grunt.loadNpmTasks('grunt-contrib-copy');
		grunt.loadNpmTasks('grunt-contrib-concat');

		grunt.registerTask('import',['wiredep']);

		grunt.registerTask('package', ['copy:js','useminPrepare','concat:dist','uglify:dist','usemin']);

		grunt.registerTask('start',['connect','watch:start']);
}
